// ==========================================================================
// This is auto-generated by gf cli tool. Fill this file as you wish.
// ==========================================================================

package model

import (
	"Web/app/model/internal"
)

type UserLog internal.UserLog

// 杀软检测所需信息
type ApiUtilAvCheckReq struct{
	Av string `v:"required#提交内容不能为空"`
}

// 添加端口扫描所需信息
type ApiUtilPortScanAddReq struct{
	CusName string `v:"required#任务名不能为空"`
	Hosts string `v:"required#主机地址不能为空"`
	Verify bool `v:"required|boolean#Verify参数值不能为空|Verify参数值必须为布尔类型"`
	Ping bool `v:"required|boolean#Ping参数值不能为空|Ping参数值必须为布尔类型"`
	Retries int `v:"required|integer#Retries参数值不能为空|Retries参数值必须为整数"`
	Rate int `v:"required|integer|min:100#Rate参数值不能为空|Rate参数值必须为整数|扫描速率最小值为100"`
	Timeout int `v:"required|integer|min:100#Timeout参数值不能为空|Timeout参数值必须为整数|探测超时最小为100"`
	Ports string `v:"required#Ports参数值不能为空"`
	NmapTimeout int `v:"required|integer|min:1#NmapTimeout参数值不能为空|NmapTimeout参数值必须为整数|指纹超时最小为1s"`
	WafNum int `v:"required|integer|min:1#WafNum参数值不能为空|WafNum参数值必须为整数|Waf过滤值最小为1"`
	Detection string `v:"required|in:top100,top1000,null#Detection参数值不能为空|优先扫描参数值只能为top100,top1000,null"`
}

// 端口扫描 模糊分页查询返回数据所需信息
type ResAPiUtilPortScanManager struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Count int64 `json:"count"`
	Data [] *UtilPortscanTask `json:"data"`
}

// 子域名扫描 模糊分页查询返回数据所需信息
type ResAPiUtilSubDomainManager struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Count int64 `json:"count"`
	Data [] *UtilSubdomainTask `json:"data"`
}

// 端口扫描管理 返回nsq所需信息
type ResAPiPortScanNsq struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Count int `json:"count"`
	MessageCount int `json:"message_count"`
	MessageBytes string `json:"message_bytes"`
	TimeoutCount int `json:"timeout_count"`
	ClientCount int `json:"client_count"`
	Data []ResAPiPortScanNsqInfo `json:"data"`
}

// 端口扫描管理 返回nsq所需详细信息
type ResAPiPortScanNsqInfo struct{
	Hostname                      string `json:"hostname"`
	RemoteAddress                 string `json:"remote_address"`
	MessageCount                  int    `json:"message_count"`
	FinishCount                   int    `json:"finish_count"`
	ConnectTs                     string `json:"connect_ts"`
}

// 端口扫描 删除指定任务数据
type ApiUtilPortScanDelReq struct{
	CusName string `v:"required#任务名不能为空" json:"cus_name"`
}

// 端口扫描详情 模糊分页查询返回数据所需信息
type ResAPiUtilPortScanShow struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Count int64 `json:"count"`
	Data [] *UtilPortscanResult`json:"data"`
}

// 端口详情 Echarts统计数据返回所需信息
type ResApiUtilPortScanEchartsInfo struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Data []ResApiUtilPortScanEchartsInfos `json:"data"`
	Data1 []ResApiUtilPortScanEchartsInfos1 `json:"data1"`
}

// 端口详情 Echarts统计数据返回所需data信息
type ResApiUtilPortScanEchartsInfos struct{
	ServiceName string `json:"name"`
	Number int `json:"value"`
}

// 端口详情 Echarts统计数据返回所需data信息
type ResApiUtilPortScanEchartsInfos1 struct{
	Port int `json:"name"`
	Number int `json:"value"`
}

// web指纹 模糊分页查询返回数据所需信息
type ResAPiUtilBanalyzeManager struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Count int64 `json:"count"`
	Data [] *Banalyze `json:"data"`
}

// web指纹 删除指定指纹
type ApiUtilBanalyzeDeteleReq struct{
	Key string `json:"key"`
}

// 指纹识别 Table返回数据所需信息
type ResAPiUtilBanalyzeInfo struct{
	Code int `json:"code"`
	Msg string `json:"msg"`
	Count int64 `json:"count"`
	Data [] *ResultApp `json:"data"`
}

// resultApp 指纹识别结果
type ResultApp struct {
	Id int `json:"id"`
	Name       string   `json:"name"`
	Version    string	`json:"version"`
	Implies    string `json:"implies"`
	Description string  `json:"description"`
}

// ApiUtilBanalyzeAddReq 添加指纹所需信息
type ApiUtilBanalyzeAddReq struct {
	Key         string
	Description string
	Value       string
}